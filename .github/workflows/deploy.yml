name: Build and Deploy Spring Boot Application

on:
  push:
    branches:
      - main  # main 브랜치에 push가 발생하면 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v2

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드 (테스트 코드 실행 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 4. EC2로 빌드 파일 전송 및 배포
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}        # EC2 인스턴스의 퍼블릭 IP
          EC2_USER: "ec2-user"         # EC2 사용자명 (예: ec2-user)
          APP_DIR: "/home/app/git"         # EC2에서 앱을 배포할 디렉토리 (예: /home/ec2-user/app)
        run: |
          echo "${SERVER_KEY}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          # 서버의 디렉토리가 존재하는지 확인하고 없으면 생성
          ssh -i /tmp/deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST 'mkdir -p /home/app/git'

          # 파일 전송 (경로를 정확히 지정)
          scp -i /tmp/deploy_key -o StrictHostKeyChecking=no build/libs/carrot-moa-0.0.1-SNAPSHOT.jar $SERVER_USER@$SERVER_HOST:/home/app/git/app.jar

          # EC2에서 애플리케이션 실행
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # 현재 실행 중인 애플리케이션 중지 (예: 기존 프로세스 종료)
            pkill -f 'app.jar' || true

            # 애플리케이션 실행
            nohup java -jar $APP_DIR/app.jar > $APP_DIR/app.log 2>&1 &
          EOF
